<?xml version="1.0" encoding="utf-8"?>
<package xmlns='http://ns.saxonica.com/xslt/export' xmlns:fn='http://www.w3.org/2005/xpath-functions' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:vv='http://saxon.sf.net/generated-variable' xmlns:java-type='http://saxon.sf.net/java-type' when='2020-10-30T14:47:08.398-04:00' id='0' version='30' packageVersion='1' saxonVersion='9.9.1.7' target='JS' targetVersion='1' relocatable='false' implicit='true'>
 <co id='0' binds='1 2'>
  <mode name='Q{}switch-in' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='32' rank='1' minImp='0' slots='0' flags='s' line='294' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='294' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='ON'/>
     </fn>
    </p.withPredicate>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='295' mode='Q{}off' flags='t' bSlot='0'>
     <dot role='select' type='element()'/>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='33' rank='0' minImp='0' slots='0' flags='s' line='298' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='299' mode='Q{}on' flags='t' bSlot='1'>
     <dot role='select' type='element()'/>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id='3' binds='4'>
  <template name='Q{}show' flags='os' line='349' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' slots='0'>
   <sequence role='body' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='351'>
    <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}set-attribute' type='item()*'>
     <str val='class'/>
     <fn name='string-join'>
      <filter flags='b'>
       <fn name='tokenize'>
        <cvUntyped to='xs:string'>
         <data>
          <slash simple='1'>
           <treat as='node()' jsTest='return SaxonJS.U.isNode(item);' diag='14|2|XPTY0020|'>
            <dot flags='a'/>
           </treat>
           <axis name='attribute' nodeTest='attribute(Q{}class)' jsTest='return item.name===&#39;class&#39;'/>
          </slash>
         </data>
        </cvUntyped>
        <str val='\s+'/>
        <str val=''/>
       </fn>
       <vc op='ne' onEmpty='1' comp='CCC'>
        <dot type='xs:string'/>
        <str val='hide'/>
       </vc>
      </filter>
      <str val=' '/>
     </fn>
    </ifCall>
    <applyT line='352' mode='Q{}spill' flags='t' bSlot='0'>
     <first role='select'>
      <slash>
       <treat as='node()' jsTest='return SaxonJS.U.isNode(item);' diag='14|3|XPTY0020|'>
        <dot flags='a'/>
       </treat>
       <union op='|'>
        <axis name='child' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
        <axis name='following' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
       </union>
      </slash>
     </first>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id='5' binds='6 6 5 6 5 6'>
  <mode name='Q{}toc' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='6' rank='1' minImp='0' slots='0' flags='s' line='83' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='83' name='empty'>
      <slash simple='2'>
       <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
       <axis name='child' nodeTest='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
      </slash>
     </fn>
    </p.withPredicate>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='85'>
     <valueOf>
      <str val=' ('/>
     </valueOf>
     <applyT flags='i' bSlot='0'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
     <valueOf flags='S'>
      <str val=')'/>
     </valueOf>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='7' rank='0' minImp='0' slots='0' flags='s' line='89' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='91'>
     <valueOf>
      <str val=', '/>
     </valueOf>
     <applyT flags='ti' bSlot='1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='3' rank='0' minImp='0' slots='0' flags='s' line='64' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
    <elem role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='65' name='h5' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='toc-entry'/>
      </att>
      <att name='data-src' flags='l'>
       <convert from='xs:untypedAtomic' to='xs:string'>
        <attVal name='Q{}src' chk='0'/>
       </convert>
      </att>
      <att name='onclick' flags='l'>
       <str val='void(0)'/>
      </att>
      <applyT line='66' mode='Q{}toc' bSlot='2'>
       <sequence role='select'>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
        <first>
         <sequence>
          <axis name='child' nodeTest='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
          <axis name='child' nodeTest='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
         </sequence>
        </first>
       </sequence>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='5' rank='0' minImp='0' slots='0' flags='s' line='76' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='78'>
     <valueOf>
      <str val=' ('/>
     </valueOf>
     <applyT flags='i' bSlot='3'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
     <applyT line='79' mode='Q{}toc' bSlot='4'>
      <slash role='select' simple='2'>
       <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
       <axis name='child' nodeTest='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
      </slash>
     </applyT>
     <valueOf flags='S'>
      <str val=')'/>
     </valueOf>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='4' rank='0' minImp='0' slots='0' flags='s' line='70' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
    <elem role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='71' name='i' nsuri=''>
     <applyT line='72' flags='i' bSlot='5'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id='7' binds='8 9'>
  <globalVariable name='Q{}pause-at-zero' type='document-node()' line='361' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' visibility='PRIVATE' jsAcceptor='function test(item) {return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);};if (test(val)) {return val;} else {throw SaxonJS.XError(&#39;Conversion failed&#39;, &#39;XTTE0590&#39;);}' jsCardCheck='function c(n) {return n==1;};'>
   <doc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='362' base='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' validation='preserve'>
    <forEach>
     <slash simple='1'>
      <gVarRef name='Q{}pause-defaults' bSlot='0'/>
      <axis name='child' nodeTest='element(Q{}p)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;p&#39;;'/>
     </slash>
     <copy line='364' flags='cinl'>
      <sequence role='content'>
       <copyOf flags='vc'>
        <axis name='attribute' nodeTest='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
       </copyOf>
       <applyT line='365' mode='Q{}set-pause-to-zero' flags='i' bSlot='1'>
        <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
       </applyT>
      </sequence>
     </copy>
    </forEach>
   </doc>
  </globalVariable>
 </co>
 <co id='10' binds=''>
  <globalVariable name='Q{}terminalchars' type='xs:string' line='303' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' visibility='PRIVATE' jsAcceptor='return SaxonJS.U.Atomic.string.cast(val);' jsCardCheck='function c(n) {return n==1;};'>
   <str val='\.!\?;,:—…'/>
  </globalVariable>
 </co>
 <co id='11' binds='12 12 13 6'>
  <mode name='Q{}textonly' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='14' rank='2' minImp='0' slots='0' flags='s' line='185' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <p.nodeTest test='document-node()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);'/>
    </p.withUpper>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='186' flags='ct' bSlot='-1'>
     <axis role='select' name='child' nodeTest='element(Q{}verse)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse&#39;;'/>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='15' rank='0' minImp='0' slots='0' flags='s' line='189' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='190'>
     <applyT mode='Q{}vertical-ws' bSlot='0'>
      <dot role='select' type='element()'/>
     </applyT>
     <applyT line='191' flags='cti' bSlot='-1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='22' rank='1' minImp='0' slots='0' flags='s' line='210' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='211'>
     <applyT mode='Q{}vertical-ws' bSlot='1'>
      <dot role='select' type='element(Q{}l)'/>
     </applyT>
     <applyT line='212' mode='Q{}indent' bSlot='2'>
      <dot role='select' type='element(Q{}l)'/>
     </applyT>
     <applyT line='213' flags='ti' bSlot='3'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='24' rank='3' minImp='0' slots='0' flags='s' line='218' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
    </p.withUpper>
    <valueOf role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='219'>
     <convert from='xs:untypedAtomic' to='xs:string'>
      <data>
       <dot type='text()'/>
      </data>
     </convert>
    </valueOf>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='23' rank='2' minImp='0' slots='0' flags='s' line='216' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='216' name='not'>
      <fn name='matches'>
       <cvUntyped to='xs:string'>
        <data>
         <dot type='text()'/>
        </data>
       </cvUntyped>
       <str val='\S'/>
       <str val=''/>
      </fn>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
  </mode>
 </co>
 <co id='8' binds=''>
  <globalVariable name='Q{}pause-defaults' type='document-node()' line='376' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' visibility='PRIVATE' jsAcceptor='function test(item) {return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);};if (test(val)) {return val;} else {throw SaxonJS.XError(&#39;Conversion failed&#39;, &#39;XTTE0590&#39;);}' jsCardCheck='function c(n) {return n==1;};'>
   <doc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='377' base='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' validation='preserve'>
    <sequence>
     <elem name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <valueOf flags='l'>
        <str val='Pause for stanza: '/>
       </valueOf>
       <elem line='378' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='stanza'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='stanza-pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='9'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='381' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <valueOf flags='l'>
        <str val='Pause for line: '/>
       </valueOf>
       <elem line='382' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='l'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='line_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='3'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='383' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <valueOf flags='l'>
        <str val='Pause for '/>
       </valueOf>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val='.'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (period): '/>
       </valueOf>
       <elem line='384' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='.'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='period_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='7'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='385' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val='!'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (exclamation point): '/>
       </valueOf>
       <elem line='386' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='!'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='exclamation_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='5'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='387' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val='?'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (question mark): '/>
       </valueOf>
       <elem line='388' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='?'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='question_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='5'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='389' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val=';'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (semicolon): '/>
       </valueOf>
       <elem line='390' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val=';'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='semicolon_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='5'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='391' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val=','/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (comma): '/>
       </valueOf>
       <elem line='392' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val=','/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='comma_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='4'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='393' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='Sl'>
         <str val=':'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (colon): '/>
       </valueOf>
       <elem line='394' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val=':'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='colon_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='5'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='395' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='l'>
         <str val='—'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (em dash): '/>
       </valueOf>
       <elem line='396' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='—'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='emdash_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='4'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='397' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <elem name='q' nsuri='' flags='l'>
        <valueOf flags='l'>
         <str val='…'/>
        </valueOf>
       </elem>
       <valueOf flags='l'>
        <str val=' (ellipsis): '/>
       </valueOf>
       <elem line='398' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='…'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='ellipsis_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='20'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='5'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
     <elem line='399' name='p' nsuri='' flags='l'>
      <sequence>
       <att name='class' flags='l'>
        <str val='ctrl'/>
       </att>
       <valueOf flags='l'>
        <str val='Fallback pause: '/>
       </valueOf>
       <elem line='400' name='input' nsuri='' flags='l'>
        <sequence>
         <att name='name' flags='l'>
          <str val='fallback'/>
         </att>
         <att name='type' flags='l'>
          <str val='number'/>
         </att>
         <att name='id' flags='l'>
          <str val='fallback_pause'/>
         </att>
         <att name='max' flags='l'>
          <str val='10'/>
         </att>
         <att name='min' flags='l'>
          <str val='0'/>
         </att>
         <att name='value' flags='l'>
          <str val='0'/>
         </att>
        </sequence>
       </elem>
      </sequence>
     </elem>
    </sequence>
   </doc>
  </globalVariable>
 </co>
 <co id='13' binds=''>
  <mode name='Q{}indent' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='-0.5' seq='26' rank='0' minImp='0' slots='0' flags='s' line='236' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='29' rank='2' minImp='0' slots='0' flags='s' line='254' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
     <p.withPredicate>
      <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
      <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='254' op='=' card='M:N' comp='CCC'>
       <data>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
       </data>
       <str val='To Autumn'/>
      </gc>
     </p.withPredicate>
    </p.withUpper>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='255'>
     <choose>
      <gc op='=' card='N:1' comp='CCC'>
       <literal count='2'>
        <str val='b'/>
        <str val='d'/>
       </literal>
       <attVal name='Q{}r' chk='0'/>
      </gc>
      <valueOf>
       <str val='  '/>
      </valueOf>
     </choose>
     <choose line='258'>
      <vc op='eq' onEmpty='0' comp='CCC'>
       <cast as='xs:string' emptiable='1'>
        <attVal name='Q{}r' chk='0'/>
       </cast>
       <str val='e'/>
      </vc>
      <valueOf>
       <str val='    '/>
      </valueOf>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='28' rank='2' minImp='0' slots='0' flags='s' line='246' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
     <p.withPredicate>
      <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
      <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='246' op='=' card='M:N' comp='CCC'>
       <data>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
       </data>
       <str val='As the Starved Maelstrom Laps the Navies'/>
      </gc>
     </p.withPredicate>
    </p.withUpper>
    <choose role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='247'>
     <arith op='mod' calc='i%i'>
      <fn name='count'>
       <slash simple='1'>
        <dot type='element(Q{}l)'/>
        <axis name='preceding-sibling' nodeTest='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
       </slash>
      </fn>
      <int val='2'/>
     </arith>
     <valueOf>
      <str val='    '/>
     </valueOf>
    </choose>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='27' rank='2' minImp='0' slots='0' flags='s' line='239' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
     <p.withPredicate>
      <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
      <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='239' op='=' card='M:N' comp='CCC'>
       <data>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
       </data>
       <str val='Love III'/>
      </gc>
     </p.withPredicate>
    </p.withUpper>
    <choose role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='240'>
     <arith op='mod' calc='i%i'>
      <fn name='count'>
       <slash simple='1'>
        <dot type='element(Q{}l)'/>
        <axis name='preceding-sibling' nodeTest='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
       </slash>
      </fn>
      <int val='2'/>
     </arith>
     <valueOf>
      <str val='      '/>
     </valueOf>
    </choose>
   </templateRule>
   <templateRule prec='0' prio='8.0' seq='30' rank='1' minImp='0' slots='0' flags='s' line='264' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
     <castable baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='264' as='xs:integer' emptiable='0'>
      <axis name='attribute' nodeTest='attribute(Q{}meter)' jsTest='return item.name===&#39;meter&#39;'/>
     </castable>
    </p.withPredicate>
    <forEach role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='265'>
     <to>
      <int val='1'/>
      <cast as='xs:integer' emptiable='1'>
       <attVal name='Q{}indent' chk='0'/>
      </cast>
     </to>
     <valueOf>
      <str val='  '/>
     </valueOf>
    </forEach>
   </templateRule>
  </mode>
 </co>
 <co id='14' binds='14 10 10'>
  <mode name='Q{}pause' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='1.0' seq='43' rank='2' minImp='0' slots='0' flags='s' as='xs:integer' line='420' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <axis baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='420' name='attribute' nodeTest='attribute(Q{}data-pause)' jsTest='return item.name===&#39;data-pause&#39;'/>
    </p.withPredicate>
    <cvUntyped role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='421' to='xs:integer' diag='7|0|XTTE0505|match="*[@data-pause]" mode="pause"'>
     <cast as='xs:untypedAtomic' emptiable='0'>
      <fn name='string'>
       <convert from='xs:integer' to='xs:string'>
        <cast as='xs:integer' emptiable='1'>
         <attVal name='Q{}data-pause' chk='0'/>
        </cast>
       </convert>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='42' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='416' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='416' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='line'/>
     </fn>
    </p.withPredicate>
    <cvUntyped role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='417' to='xs:integer' diag='7|0|XTTE0505|match="*[contains-token(@class,&#39;line&#39;)]" mode="pause"'>
     <cast as='xs:untypedAtomic' emptiable='0'>
      <fn name='string-join'>
       <convert from='xs:anyAtomicType' to='xs:string'>
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name='key'>
             <str val='input-by-name'/>
             <str val='line'/>
             <check card='1' diag='0|2||fn:key'>
              <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
             </check>
            </fn>
            <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}get' type='item()*'>
             <dot type='node()'/>
             <str val='value'/>
            </ifCall>
           </forEach>
           <int val='3'/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=' '/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='41' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='412' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='412' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='stanza'/>
     </fn>
    </p.withPredicate>
    <cvUntyped role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='413' to='xs:integer' diag='7|0|XTTE0505|match="*[contains-token(@class,&#39;stanza&#39;)]" mode="pause"'>
     <cast as='xs:untypedAtomic' emptiable='0'>
      <fn name='string-join'>
       <convert from='xs:anyAtomicType' to='xs:string'>
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name='key'>
             <str val='input-by-name'/>
             <str val='stanza'/>
             <check card='1' diag='0|2||fn:key'>
              <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
             </check>
            </fn>
            <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}get' type='item()*'>
             <dot type='node()'/>
             <str val='value'/>
            </ifCall>
           </forEach>
           <int val='12'/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=' '/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='44' rank='3' minImp='0' slots='0' flags='s' as='xs:integer' line='429' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
     <is baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='429' op='is'>
      <dot type='element(Q{}span)'/>
      <slash>
       <fn name='root'>
        <dot type='element(Q{}span)'/>
       </fn>
       <first>
        <filter flags='b'>
         <axis name='descendant' nodeTest='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
         <fn name='contains-token'>
          <cvUntyped to='xs:string'>
           <attVal name='Q{}class' chk='0'/>
          </cvUntyped>
          <str val='phr'/>
         </fn>
        </filter>
       </first>
      </slash>
     </is>
    </p.withPredicate>
    <int role='action' val='0'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='45' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='431' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='431' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='phr'/>
     </fn>
    </p.withPredicate>
    <treat role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='433' as='xs:integer' jsTest='return SaxonJS.U.Atomic.integer.matches(item);' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
     <check card='1' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
      <cvUntyped to='xs:integer' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
       <data>
        <applyT mode='Q{}pause' flags='t' bSlot='0'>
         <slash role='select' simple='1'>
          <first>
           <filter flags='b'>
            <slash simple='1'>
             <dot type='element(Q{}span)'/>
             <axis name='preceding' nodeTest='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
            </slash>
            <fn name='contains-token'>
             <cvUntyped to='xs:string'>
              <attVal name='Q{}class' chk='0'/>
             </cvUntyped>
             <str val='phr'/>
            </fn>
           </filter>
          </first>
          <axis name='child' nodeTest='text()' jsTest='return item.nodeType===3;'/>
         </slash>
        </applyT>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='40' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='403' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='403' name='matches'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <fn name='concat'>
       <str val='['/>
       <gVarRef name='Q{}terminalchars' bSlot='1'/>
       <str val=']$'/>
      </fn>
      <str val=''/>
     </fn>
    </p.withPredicate>
    <check role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='405' card='1' diag='3|0||delay'>
     <cast as='xs:integer' emptiable='1'>
      <atomSing card='?' diag='2|0||cast as'>
       <first>
        <sequence>
         <forEach>
          <fn name='key'>
           <str val='input-by-name'/>
           <fn line='404' name='replace'>
            <cvUntyped to='xs:string'>
             <data>
              <dot type='text()'/>
             </data>
            </cvUntyped>
            <fn name='concat'>
             <str val='.*(['/>
             <gVarRef name='Q{}terminalchars' bSlot='2'/>
             <str val='])$'/>
            </fn>
            <str val='$1'/>
            <str val=''/>
           </fn>
           <check card='1' diag='0|2||fn:key'>
            <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
           </check>
          </fn>
          <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}get' type='item()*'>
           <dot type='node()'/>
           <str val='value'/>
          </ifCall>
         </forEach>
         <int val='0'/>
        </sequence>
       </first>
      </atomSing>
     </cast>
    </check>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='38' rank='0' minImp='0' slots='0' flags='s' as='xs:integer' line='357' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
    <cvUntyped role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='358' to='xs:integer' diag='7|0|XTTE0505|match="node()" mode="pause"'>
     <cast as='xs:untypedAtomic' emptiable='0'>
      <fn name='string-join'>
       <convert from='xs:anyAtomicType' to='xs:string'>
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name='key'>
             <str val='input-by-name'/>
             <str val='fallback'/>
             <check card='1' diag='0|2||fn:key'>
              <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
             </check>
            </fn>
            <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}get' type='item()*'>
             <dot type='node()'/>
             <str val='value'/>
            </ifCall>
           </forEach>
           <int val='0'/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=' '/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
  </mode>
 </co>
 <co id='15' binds=''>
  <template name='Q{}css' flags='os' line='436' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' slots='0'>
   <valueOf role='body' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='436'>
    <str val='&#xA;html, body { background-color: white }&#xA;&#xA;.tag { color: green; font-family: sans-serif; font-size: 80%; font-weight: bold }&#xA;&#xA;.pub { }&#xA;&#xA;.title { }&#xA;&#xA;.author { }&#xA;&#xA;.l { padding-left: 2em; text-indent: -2em; margin-top: 0ex; margin-bottom: 0ex }&#xA;&#xA;.l * { display: inline }&#xA;&#xA;span.phr {transition: color 1s ease-in;&#xA;    -moz-transition: color 1s ease-in;&#xA;    -webkit-transition: color 1s ease-in; }&#xA;&#xA;#xmljellysandwich_footer { clear: both; width: 100%; font-size: 80%;&#xA;  border-top: thin solid black; padding-top: 1em; padding-bottom: 2em;&#xA;  font-family: &#39;Roboto Slab&#39;, sans-serif;&#xA;  margin-top: 1em }&#xA;&#xA;        &#xA;&#xA;textarea { padding: 0.5em }&#xA;button { width: 7em }&#xA;button:hover { font-weight: bold }&#xA;&#xA;       &#xA;.verse p { padding-left: 3em; text-indent: -3em }&#xA;.stanza p { margin-top: 0ex; margin-bottom: 0ex }&#xA;.stanza { margin-top: 3ex }&#xA;.stanza:first-child { margin-top: 0ex}&#xA;&#xA;.verse .indent1 { padding-left: 3em }&#xA;.verse .indent2 { padding-left: 4em }&#xA;.verse .indent3 { padding-left: 5em }&#xA;.verse .indent4 { padding-left: 6em }&#xA;.verse .indent5 { padding-left: 7em }&#xA;.verse .indent6 { padding-left: 8em }&#xA;.verse .indent7 { padding-left: 9em }&#xA;.verse .indent8 { padding-left: 10em }&#xA;.verse .indent9 { padding-left: 11em }&#xA;&#xA;#text_title, #text_byline { padding-left: 2% }&#xA;&#xA;.panel { display: none; padding: 2%; vertical-align: text-top }&#xA;.panel.ON { display: inline-block } /* way better thanks to AMC */&#xA;&#xA;.hide { display: none }&#xA;&#xA;#tell_panel { background-color: white }&#xA;&#xA;.pane * { margin-top: 1ex; margin-bottom: 1ex }&#xA;&#xA;#right_pane { width: 50%; float: right; clear: both }&#xA;&#xA;#tweak_panel { text-align: right;&#xA;  background-color: lavender; padding: 1em; border: thin outset black;&#xA;  font-family: sans-serif; font-size: 80%; overflow: auto; max-height: 80% }&#xA;  &#xA;#tweak_panel &gt; *:first-child { margin-top: 0ex }&#xA;&#xA;#dir_panel { &#xA;  background-color: gainsboro;&#xA;  padding: 1em; border: thin outset black;&#xA;  font-family: sans-serif }&#xA;#dir_panel &gt; *:first-child { margin-top: 0ex }&#xA;&#xA;.toc-entry { cursor: pointer }  /* enhancement courtesy of GI */&#xA;&#xA;.ctrl { display: inline-block; margin: 0ex }&#xA;&#xA;code.button { padding: 0.5ex 1ex; background-color: white; border: thin sold black }&#xA;   '/>
   </valueOf>
  </template>
 </co>
 <co id='16' binds='1 1 2 0 17 1 1 2 4 0 7 8 0 6 6 11 1 2 16'>
  <mode name='Q{http://saxonica.com/ns/interactiveXSLT}click' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='11' rank='0' minImp='0' slots='0' flags='s' line='151' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='151' name='id'>
      <str val='clear_select'/>
     </fn>
    </p.nodeSet>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='152'>
     <applyT mode='Q{}off' bSlot='0'>
      <fn role='select' name='id'>
       <str val='tell_panel'/>
      </fn>
     </applyT>
     <applyT line='153' mode='Q{}off' bSlot='1'>
      <fn role='select' name='id'>
       <str val='tweak_panel'/>
      </fn>
     </applyT>
     <resultDoc line='154' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#text_title'/>
      <valueOf role='content' flags='S'>
       <str val='[Title]'/>
      </valueOf>
     </resultDoc>
     <resultDoc line='155' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#text_byline'/>
      <valueOf role='content' flags='S'>
       <str val='[Author]'/>
      </valueOf>
     </resultDoc>
     <resultDoc line='157' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#text_panel'/>
      <elem role='content' line='158' name='textarea' nsuri=''>
       <sequence>
        <att name='rows' flags='l'>
         <str val='28'/>
        </att>
        <att name='cols' flags='l'>
         <str val='50'/>
        </att>
        <att name='id' flags='l'>
         <str val='poetry-in-motion'/>
        </att>
        <valueOf flags='l'>
         <str val='[ ... text ...]'/>
        </valueOf>
       </sequence>
      </elem>
     </resultDoc>
     <applyT line='160' mode='Q{}on' flags='t' bSlot='2'>
      <fn role='select' name='id'>
       <str val='text_panel'/>
      </fn>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='10' rank='0' minImp='0' slots='0' flags='s' line='147' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='147' name='id'>
      <str val='tweak_select'/>
     </fn>
    </p.nodeSet>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='148' mode='Q{}switch-in' flags='t' bSlot='3'>
     <fn role='select' name='id'>
      <str val='tweak_panel'/>
     </fn>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='9' rank='0' minImp='0' slots='1' flags='s' line='98' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='98' name='id'>
      <str val='tell_select'/>
     </fn>
    </p.nodeSet>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='99'>
     <resultDoc global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#tell_panel'/>
      <elem role='content' line='100' name='section' nsuri=''>
       <sequence>
        <att name='class' flags='l'>
         <str val='verse'/>
        </att>
        <forEach line='102'>
         <fn name='id'>
          <str val='poetry-in-motion'/>
          <check card='1' diag='0|1||fn:id'>
           <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
          </check>
         </fn>
         <forEachGroup line='107' algorithm='adjacent'>
          <fn role='select' name='tokenize'>
           <treat as='xs:string' jsTest='return SaxonJS.U.Atomic.string.matches(item);' diag='0|0||fn:tokenize'>
            <check card='?' diag='0|0||fn:tokenize'>
             <cvUntyped to='xs:string'>
              <data>
               <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}get' type='item()*'>
                <dot type='element()'/>
                <str val='value'/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <str val='\n'/>
           <str val=''/>
          </fn>
          <fn role='key' name='matches'>
           <dot type='xs:string'/>
           <str val='\S'/>
           <str val=''/>
          </fn>
          <str role='collation' val='http://www.w3.org/2005/xpath-functions/collation/codepoint'/>
          <choose role='content' line='108'>
           <currentGroupingKey/>
           <elem line='109' name='div' nsuri='' flags='l'>
            <sequence>
             <att name='class' flags='l'>
              <str val='stanza'/>
             </att>
             <forEach line='111'>
              <currentGroup/>
              <let line='113' var='Q{}indent' as='xs:string' slot='0' eval='8'>
               <fn name='replace'>
                <dot type='xs:string'/>
                <str val='\S.*$'/>
                <str val=''/>
                <str val=''/>
               </fn>
               <elem line='123' name='p' nsuri='' flags='l'>
                <sequence>
                 <att name='class' flags='l'>
                  <fn name='concat'>
                   <str val='line indent'/>
                   <convert from='xs:integer' to='xs:string'>
                    <arith op='+' calc='i+i'>
                     <arith op='*' calc='i*i'>
                      <fn line='120' name='string-length'>
                       <fn name='replace'>
                        <varRef name='Q{}indent' slot='0'/>
                        <str val=' '/>
                        <str val=''/>
                        <str val=''/>
                       </fn>
                      </fn>
                      <int val='3'/>
                     </arith>
                     <fn line='117' name='string-length'>
                      <fn name='replace'>
                       <varRef name='Q{}indent' slot='0'/>
                       <str val='\t'/>
                       <str val=''/>
                       <str val=''/>
                      </fn>
                     </fn>
                    </arith>
                   </convert>
                  </fn>
                 </att>
                 <callT line='125' name='Q{}spill-out' bSlot='4'>
                  <withParam name='Q{}spilling' flags='c' as='xs:string'>
                   <dot line='126' type='xs:string'/>
                  </withParam>
                 </callT>
                </sequence>
               </elem>
              </let>
             </forEach>
            </sequence>
           </elem>
          </choose>
         </forEachGroup>
        </forEach>
       </sequence>
      </elem>
     </resultDoc>
     <applyT line='138' mode='Q{}off' bSlot='5'>
      <fn role='select' name='id'>
       <str val='dir_panel'/>
      </fn>
     </applyT>
     <applyT line='139' mode='Q{}off' bSlot='6'>
      <fn role='select' name='id'>
       <str val='tweak_panel'/>
      </fn>
     </applyT>
     <applyT line='140' mode='Q{}on' bSlot='7'>
      <fn role='select' name='id'>
       <str val='tell_panel'/>
      </fn>
     </applyT>
     <applyT line='143' mode='Q{}spill' flags='t' bSlot='8'>
      <docOrder role='select' intra='1'>
       <slash simple='2'>
        <docOrder intra='1'>
         <slash>
          <fn name='id'>
           <str val='tell_panel'/>
          </fn>
          <first>
           <axis name='descendant' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          </first>
         </slash>
        </docOrder>
        <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
       </slash>
      </docOrder>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='8' rank='0' minImp='0' slots='0' flags='s' line='94' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='94' name='id'>
      <str val='text_select'/>
     </fn>
    </p.nodeSet>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='95' mode='Q{}switch-in' flags='t' bSlot='9'>
     <fn role='select' name='id'>
      <str val='text_panel'/>
     </fn>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='2' rank='0' minImp='0' slots='0' flags='s' line='56' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='56' name='id'>
      <str val='zero'/>
     </fn>
    </p.nodeSet>
    <resultDoc role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='57' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#pause_control'/>
     <gVarRef role='content' line='58' name='Q{}pause-at-zero' bSlot='10'/>
    </resultDoc>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='1' rank='0' minImp='0' slots='0' flags='s' line='50' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='50' name='id'>
      <str val='reset'/>
     </fn>
    </p.nodeSet>
    <resultDoc role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='51' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#pause_control'/>
     <gVarRef role='content' line='52' name='Q{}pause-defaults' bSlot='11'/>
    </resultDoc>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='0' rank='0' minImp='0' slots='0' flags='s' line='46' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='46' name='id'>
      <str val='dir_select'/>
     </fn>
    </p.nodeSet>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='47' mode='Q{}switch-in' flags='t' bSlot='12'>
     <fn role='select' name='id'>
      <str val='dir_panel'/>
     </fn>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='13' rank='0' minImp='0' slots='1' flags='s' line='167' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}h5)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;h5&#39;;'/>
     <vc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='167' op='eq' onEmpty='0' comp='CCC'>
      <cast as='xs:string' emptiable='1'>
       <attVal name='Q{}class' chk='0'/>
      </cast>
      <str val='toc-entry'/>
     </vc>
    </p.withPredicate>
    <let role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='168' var='Q{}poem' as='node()?' slot='0' eval='8'>
     <fn name='document'>
      <fn name='resolve-uri'>
       <cvUntyped to='xs:string'>
        <attVal name='Q{}data-src' chk='0'/>
       </cvUntyped>
      </fn>
     </fn>
     <sequence line='169'>
      <resultDoc global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
       <str role='href' val='#text_title'/>
       <applyT role='content' line='170' bSlot='13'>
        <slash role='select' simple='1'>
         <slash>
          <varRef name='Q{}poem' slot='0'/>
          <first>
           <axis name='descendant' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
          </first>
         </slash>
         <axis name='child' nodeTest='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
        </slash>
       </applyT>
      </resultDoc>
      <resultDoc line='172' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
       <str role='href' val='#text_byline'/>
       <applyT role='content' line='173' bSlot='14'>
        <docOrder role='select' intra='1'>
         <slash simple='2'>
          <slash simple='2'>
           <slash simple='1'>
            <varRef name='Q{}poem' slot='0'/>
            <axis name='descendant' nodeTest='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
           </slash>
           <axis name='child' nodeTest='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
          </slash>
          <axis name='child' nodeTest='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
         </slash>
        </docOrder>
       </applyT>
      </resultDoc>
      <resultDoc line='175' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
       <str role='href' val='#text_panel'/>
       <elem role='content' line='177' name='textarea' nsuri=''>
        <sequence>
         <att name='rows' flags='l'>
          <str val='28'/>
         </att>
         <att name='cols' flags='l'>
          <str val='50'/>
         </att>
         <att name='id' flags='l'>
          <str val='poetry-in-motion'/>
         </att>
         <applyT line='178' mode='Q{}textonly' bSlot='15'>
          <varRef role='select' name='Q{}poem' slot='0'/>
         </applyT>
        </sequence>
       </elem>
      </resultDoc>
      <applyT line='181' mode='Q{}off' bSlot='16'>
       <fn role='select' name='id'>
        <str val='tweak_panel'/>
       </fn>
      </applyT>
      <applyT line='182' mode='Q{}on' flags='t' bSlot='17'>
       <fn role='select' name='id'>
        <str val='text_panel'/>
       </fn>
      </applyT>
     </sequence>
    </let>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='12' rank='0' minImp='0' slots='0' flags='s' line='163' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}code)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;code&#39;;'/>
     <vc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='163' op='eq' onEmpty='0' comp='CCC'>
      <cast as='xs:string' emptiable='1'>
       <attVal name='Q{}class' chk='0'/>
      </cast>
      <str val='button'/>
     </vc>
    </p.withPredicate>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='164' mode='Q{http://saxonica.com/ns/interactiveXSLT}click' flags='t' bSlot='18'>
     <fn role='select' name='key'>
      <str val='button-by-label'/>
      <fn name='string'>
       <dot type='element(Q{}code)'/>
      </fn>
     </fn>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id='12' binds=''>
  <mode name='Q{}vertical-ws' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='-0.5' seq='16' rank='0' minImp='0' slots='0' flags='s' line='195' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <valueOf role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='-1'>
     <str val='&#xA;'/>
    </valueOf>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='19' rank='2' minImp='0' slots='0' flags='s' line='201' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}stanza)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;stanza&#39;;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='201' name='empty'>
      <axis name='preceding-sibling' nodeTest='element(Q{}stanza)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;stanza&#39;;'/>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='10.0' seq='25' rank='3' minImp='0' slots='0' flags='s' line='230' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='element(Q{}couplet)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;couplet&#39;;'/>
     <p.withPredicate>
      <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
      <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='230' op='=' card='M:N' comp='CCC'>
       <data>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
       </data>
       <str val='Exequy'/>
      </gc>
     </p.withPredicate>
    </p.withUpper>
    <choose role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='231'>
     <arith op='mod' calc='i%i'>
      <fn name='count'>
       <slash simple='1'>
        <dot type='element(Q{}couplet)'/>
        <axis name='preceding-sibling' nodeTest='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
       </slash>
      </fn>
      <int val='2'/>
     </arith>
     <valueOf>
      <str val='      '/>
     </valueOf>
    </choose>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='21' rank='2' minImp='0' slots='0' flags='s' line='203' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}couplet)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;couplet&#39;;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='203' name='empty'>
      <axis name='preceding-sibling' nodeTest='element(Q{}couplet)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;couplet&#39;;'/>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='18' rank='2' minImp='0' slots='0' flags='s' line='200' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
     <is baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='200' op='is'>
      <dot type='element(Q{}l)'/>
      <slash>
       <root/>
       <first>
        <axis name='descendant' nodeTest='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
       </first>
      </slash>
     </is>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='20' rank='2' minImp='0' slots='0' flags='s' line='202' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}verse-para)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse-para&#39;;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='202' name='empty'>
      <axis name='preceding-sibling' nodeTest='element(Q{}verse-para)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse-para&#39;;'/>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='17' rank='1' minImp='0' slots='0' flags='s' line='199' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element(Q{}verse)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse&#39;;'/>
    <empty role='action'/>
   </templateRule>
  </mode>
 </co>
 <co id='2' binds=''>
  <mode name='Q{}on' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='-0.5' seq='47' rank='0' minImp='0' slots='0' flags='s' line='520' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <ifCall role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='522' name='Q{http://saxonica.com/ns/interactiveXSLT}set-attribute' type='item()*'>
     <str val='class'/>
     <fn name='string-join'>
      <sequence>
       <filter flags='b'>
        <fn name='tokenize'>
         <cvUntyped to='xs:string'>
          <attVal name='Q{}class' chk='0'/>
         </cvUntyped>
         <str val='\s+'/>
         <str val=''/>
        </fn>
        <vc op='ne' onEmpty='1' comp='CCC'>
         <dot type='xs:string'/>
         <str val='ON'/>
        </vc>
       </filter>
       <str val='ON'/>
      </sequence>
      <str val=' '/>
     </fn>
    </ifCall>
   </templateRule>
  </mode>
 </co>
 <co id='9' binds=''>
  <mode name='Q{}set-pause-to-zero' onNo='SC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='39' rank='0' minImp='0' slots='0' flags='s' line='372' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='attribute(Q{}value)' jsTest='return SaxonJS.U.isAttr(item) &amp;&amp; item.name===&#39;value&#39;'/>
     <p.nodeTest test='element(Q{}input)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;input&#39;;'/>
    </p.withUpper>
    <att role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='373' name='value'>
     <str val='0'/>
    </att>
   </templateRule>
  </mode>
 </co>
 <co id='4' binds='14 3 4'>
  <mode name='Q{}spill' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='37' rank='2' minImp='0' slots='0' flags='s' line='347' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='347' name='empty'>
      <filter flags='b'>
       <axis name='ancestor-or-self' nodeTest='element()' jsTest='return item.nodeType===1;'/>
       <fn name='contains-token'>
        <cvUntyped to='xs:string'>
         <attVal name='Q{}class' chk='0'/>
        </cvUntyped>
        <str val='verse'/>
       </fn>
      </filter>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='-0.2' seq='35' rank='1' minImp='0' slots='1' flags='s' line='327' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <let role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='328' var='Q{}pause' as='document-node()' slot='0' eval='16'>
     <doc line='329' base='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' validation='preserve'>
      <applyT mode='Q{}pause' bSlot='0'>
       <dot role='select' type='element()'/>
      </applyT>
     </doc>
     <ifCall line='335' name='Q{http://saxonica.com/ns/interactiveXSLT}schedule-action' type='item()*'>
      <arith line='333' op='+' calc='i+i'>
       <cast as='xs:integer' emptiable='0'>
        <arith op='*' calc='d*d'>
         <cvUntyped to='xs:double'>
          <data>
           <varRef name='Q{}pause' slot='0'/>
          </data>
         </cvUntyped>
         <dbl val='360'/>
        </arith>
       </cast>
       <int val='1'/>
      </arith>
      <empty/>
      <callT line='336' name='Q{}show' bSlot='1'/>
     </ifCall>
    </let>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='36' rank='0' minImp='0' slots='0' flags='s' line='342' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
    <applyT role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='343' mode='Q{}spill' flags='t' bSlot='2'>
     <first role='select'>
      <union op='|'>
       <axis name='child' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
       <axis name='following' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
      </union>
     </first>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id='18' binds='15 5 8'>
  <template name='Q{}xmljellysandwich_pack' flags='os' line='30' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' slots='0'>
   <sequence role='body' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='31'>
    <resultDoc global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;'>
     <str role='href' val='#teller-css'/>
     <callT role='content' line='32' name='Q{}css' bSlot='0'/>
    </resultDoc>
    <resultDoc line='34' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#dir_panel'/>
     <elem role='content' line='35' name='section' nsuri=''>
      <sequence>
       <att name='class' flags='l'>
        <str val='toc'/>
       </att>
       <applyT line='36' mode='Q{}toc' bSlot='1'>
        <slash role='select' simple='2'>
         <slash simple='1'>
          <root/>
          <axis name='child' nodeTest='element()' jsTest='return item.nodeType===1;'/>
         </slash>
         <axis name='child' nodeTest='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
        </slash>
       </applyT>
      </sequence>
     </elem>
    </resultDoc>
    <resultDoc line='39' global='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;' local='#&#xD;&#xA;#Fri Oct 30 14:47:08 EDT 2020&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#pause_control'/>
     <gVarRef role='content' line='40' name='Q{}pause-defaults' bSlot='2'/>
    </resultDoc>
   </sequence>
  </template>
 </co>
 <co id='17' binds='10 10'>
  <template name='Q{}spill-out' flags='os' line='305' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' slots='1'>
   <sequence role='body' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='306'>
    <param name='Q{}spilling' slot='0' flags='i' as='xs:string'>
     <treat role='conversion' as='xs:string' jsTest='return SaxonJS.U.Atomic.string.matches(item);' diag='8|0|XTTE0590|spilling'>
      <check card='1' diag='8|0|XTTE0590|spilling'>
       <cvUntyped to='xs:string' diag='8|0|XTTE0590|spilling'>
        <data>
         <supplied slot='0'/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <analyzeString line='308'>
     <varRef role='select' name='Q{}spilling' slot='0'/>
     <fn role='regex' name='concat'>
      <str val='[^'/>
      <gVarRef name='Q{}terminalchars' bSlot='0'/>
      <str val=']*['/>
      <gVarRef name='Q{}terminalchars' bSlot='1'/>
      <str val=']'/>
     </fn>
     <str role='flags' val=''/>
     <elem role='matching' line='310' name='span' nsuri=''>
      <sequence>
       <att name='class' flags='l'>
        <str val='phr hide'/>
       </att>
       <valueOf line='311' flags='l'>
        <dot type='xs:string'/>
       </valueOf>
      </sequence>
     </elem>
     <elem role='nonMatching' line='315' name='span' nsuri=''>
      <sequence>
       <att name='class' flags='l'>
        <str val='phr hide'/>
       </att>
       <valueOf line='316' flags='l'>
        <dot type='xs:string'/>
       </valueOf>
      </sequence>
     </elem>
    </analyzeString>
   </sequence>
  </template>
 </co>
 <co id='1' binds=''>
  <mode name='Q{}off' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='-0.5' seq='46' rank='0' minImp='0' slots='0' flags='s' line='514' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <ifCall role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='517' name='Q{http://saxonica.com/ns/interactiveXSLT}set-attribute' type='item()*'>
     <str val='class'/>
     <fn name='string-join'>
      <filter flags='b'>
       <fn name='tokenize'>
        <cvUntyped to='xs:string'>
         <attVal name='Q{}class' chk='0'/>
        </cvUntyped>
        <str val='\s+'/>
        <str val=''/>
       </fn>
       <vc op='ne' onEmpty='1' comp='CCC'>
        <dot type='xs:string'/>
        <str val='ON'/>
       </vc>
      </filter>
      <str val=' '/>
     </fn>
    </ifCall>
   </templateRule>
  </mode>
 </co>
 <co id='6' binds=''>
  <mode onNo='TC' flags='dW' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='31' rank='1' minImp='0' slots='0' flags='s' line='281' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}i)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;i&#39;;'/>
     <p.withUpper axis='ancestor' upFirst='false'>
      <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
      <p.withPredicate>
       <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
       <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='281' op='=' card='M:N' comp='CCC'>
        <data>
         <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
        </data>
        <str val='Love III'/>
       </gc>
      </p.withPredicate>
     </p.withUpper>
    </p.withUpper>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='282'>
     <choose>
      <vc op='ne' onEmpty='1' comp='CCC'>
       <slash>
        <first>
         <filter flags='b'>
          <slash simple='1'>
           <dot type='element()'/>
           <axis name='preceding' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          </slash>
          <fn name='matches'>
           <cvUntyped to='xs:string'>
            <data>
             <dot type='text()'/>
            </data>
           </cvUntyped>
           <str val='\S'/>
           <str val=''/>
          </fn>
         </filter>
        </first>
        <fn name='name'>
         <check card='?' diag='0|0||fn:name'>
          <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
         </check>
        </fn>
       </slash>
       <fn name='name'>
        <dot type='element()'/>
       </fn>
      </vc>
      <valueOf>
       <str val='“'/>
      </valueOf>
     </choose>
     <applyT line='285' flags='ci' bSlot='-1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
     <choose line='286'>
      <vc op='ne' onEmpty='1' comp='CCC'>
       <slash>
        <first>
         <filter flags='b'>
          <axis name='following' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          <fn name='matches'>
           <cvUntyped to='xs:string'>
            <data>
             <dot type='text()'/>
            </data>
           </cvUntyped>
           <str val='\S'/>
           <str val=''/>
          </fn>
         </filter>
        </first>
        <fn name='name'>
         <check card='?' diag='0|0||fn:name'>
          <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
         </check>
        </fn>
       </slash>
       <fn name='name'>
        <dot type='element()'/>
       </fn>
      </vc>
      <valueOf>
       <str val='”'/>
      </valueOf>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='31' part='1' rank='1' minImp='0' slots='0' flags='s' line='281' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}love)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;love&#39;;'/>
     <p.withUpper axis='ancestor' upFirst='false'>
      <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
      <p.withPredicate>
       <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
       <gc baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='281' op='=' card='M:N' comp='CCC'>
        <data>
         <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
        </data>
        <str val='Love III'/>
       </gc>
      </p.withPredicate>
     </p.withUpper>
    </p.withUpper>
    <sequence role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='282'>
     <choose>
      <vc op='ne' onEmpty='1' comp='CCC'>
       <slash>
        <first>
         <filter flags='b'>
          <slash simple='1'>
           <dot type='element()'/>
           <axis name='preceding' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          </slash>
          <fn name='matches'>
           <cvUntyped to='xs:string'>
            <data>
             <dot type='text()'/>
            </data>
           </cvUntyped>
           <str val='\S'/>
           <str val=''/>
          </fn>
         </filter>
        </first>
        <fn name='name'>
         <check card='?' diag='0|0||fn:name'>
          <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
         </check>
        </fn>
       </slash>
       <fn name='name'>
        <dot type='element()'/>
       </fn>
      </vc>
      <valueOf>
       <str val='“'/>
      </valueOf>
     </choose>
     <applyT line='285' flags='ci' bSlot='-1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
     <choose line='286'>
      <vc op='ne' onEmpty='1' comp='CCC'>
       <slash>
        <first>
         <filter flags='b'>
          <axis name='following' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          <fn name='matches'>
           <cvUntyped to='xs:string'>
            <data>
             <dot type='text()'/>
            </data>
           </cvUntyped>
           <str val='\S'/>
           <str val=''/>
          </fn>
         </filter>
        </first>
        <fn name='name'>
         <check card='?' diag='0|0||fn:name'>
          <axis name='parent' nodeTest='(element()|document-node())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
         </check>
        </fn>
       </slash>
       <fn name='name'>
        <dot type='element()'/>
       </fn>
      </vc>
      <valueOf>
       <str val='”'/>
      </valueOf>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='34' rank='0' minImp='0' slots='0' flags='s' line='323' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl'>
    <p.nodeTest role='match' test='attribute(Q{}pause)' jsTest='return SaxonJS.U.isAttr(item) &amp;&amp; item.name===&#39;pause&#39;'/>
    <att role='action' baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='324' name='data-pause'>
     <convert from='xs:untypedAtomic' to='xs:string'>
      <data>
       <dot type='attribute(Q{}pause)'/>
      </data>
     </convert>
    </att>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name='Q{}button-by-label' line='28' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' binds='' flags='u'>
  <p.nodeTest test='element(Q{}button)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;button&#39;;'/>
  <fn baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='28' name='string'>
   <dot type='element(Q{}button)'/>
  </fn>
 </key>
 <key name='Q{}input-by-name' line='26' module='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' binds='' flags='u'>
  <p.nodeTest test='element(Q{}input)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;input&#39;;'/>
  <attVal baseUri='file:/C:/Users/Wendell/Documents/GitHub/XMLjellysandwich/docs/Versifier/poem-teller.xsl' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='26' name='Q{}name' chk='0'/>
 </key>
 <output>
  <property name='{http://saxon.sf.net/}stylesheet-version' value='30'/>
 </output>
 <decimalFormat/>
</package>
<?Σ 918b73c4?>
