<?xml version="1.0" encoding="utf-8"?>
<package xmlns='http://ns.saxonica.com/xslt/export' xmlns:fn='http://www.w3.org/2005/xpath-functions' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:vv='http://saxon.sf.net/generated-variable' xmlns:java-type='http://saxon.sf.net/java-type' when='2021-03-09T14:54:55.643-05:00' id='0' version='30' packageVersion='1' saxonVersion='9.9.1.7' target='JS' targetVersion='1' relocatable='true' implicit='true'>
 <co id='0' binds='1'>
  <template name='Q{}show' flags='os' line='257' module='versifier.xsl' slots='0'>
   <sequence role='body' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='260'>
    <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}set-attribute' type='item()*'>
     <str val='class'/>
     <fn name='string-join'>
      <filter flags='b'>
       <fn line='258' name='tokenize'>
        <cvUntyped to='xs:string'>
         <data>
          <slash simple='1'>
           <treat as='node()' jsTest='return SaxonJS.U.isNode(item);' diag='14|2|XPTY0020|'>
            <dot flags='a'/>
           </treat>
           <axis name='attribute' nodeTest='attribute(Q{}class)' jsTest='return item.name===&#39;class&#39;'/>
          </slash>
         </data>
        </cvUntyped>
        <str val='\s+'/>
        <str val=''/>
       </fn>
       <vc op='ne' onEmpty='1' comp='CCC'>
        <dot type='xs:string'/>
        <str val='hidden'/>
       </vc>
      </filter>
      <str val=' '/>
     </fn>
    </ifCall>
    <applyT line='261' mode='Q{}spill' flags='t' bSlot='0'>
     <first role='select'>
      <slash>
       <treat as='node()' jsTest='return SaxonJS.U.isNode(item);' diag='14|3|XPTY0020|'>
        <dot flags='a'/>
       </treat>
       <union op='|'>
        <axis name='child' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
        <axis name='following' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
       </union>
      </slash>
     </first>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id='2' binds='2 3'>
  <mode name='Q{}toc' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.0' seq='4' rank='0' minImp='0' slots='0' flags='s' line='58' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}catalog)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;catalog&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='59' name='div' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='toc'/>
      </att>
      <applyT line='60' flags='ci' bSlot='-1'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='5' rank='1' minImp='0' slots='0' flags='s' line='65' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='65' name='exists'>
      <fn name='id'>
       <fn name='replace'>
        <cvUntyped to='xs:string'>
         <attVal name='Q{}src' chk='0'/>
        </cvUntyped>
        <str val='^.*/|\..*$'/>
        <str val=''/>
        <str val=''/>
       </fn>
       <check card='1' diag='0|1||fn:id'>
        <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
       </check>
      </fn>
     </fn>
    </p.withPredicate>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='6' rank='0' minImp='0' slots='0' flags='s' line='67' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='68' name='h5' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='toc-entry'/>
      </att>
      <att name='data-src' flags='l'>
       <convert from='xs:untypedAtomic' to='xs:string'>
        <attVal name='Q{}src' chk='0'/>
       </convert>
      </att>
      <att name='onclick' flags='l'>
       <str val='void(0)'/>
      </att>
      <applyT line='69' mode='Q{}toc' bSlot='0'>
       <sequence role='select'>
        <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
        <axis name='child' nodeTest='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
       </sequence>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='7' rank='0' minImp='0' slots='0' flags='s' line='73' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
    <sequence role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='75'>
     <valueOf>
      <str val=' ('/>
     </valueOf>
     <applyT flags='i' bSlot='1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
     <valueOf flags='S'>
      <str val=')'/>
     </valueOf>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id='4' binds=''>
  <globalVariable name='Q{}terminalchars' type='xs:string' line='268' module='versifier.xsl' visibility='PRIVATE' jsAcceptor='return SaxonJS.U.Atomic.string.cast(val);' jsCardCheck='function c(n) {return n==1;};'>
   <str val='\.!\?;,:—…'/>
  </globalVariable>
 </co>
 <co id='5' binds='3'>
  <template name='Q{}load-poem' flags='os' line='93' module='versifier.xsl' slots='1'>
   <sequence role='body' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='94'>
    <param name='Q{}where' slot='0' flags='r' as='xs:anyURI'>
     <treat role='conversion' as='xs:anyURI' jsTest='return SaxonJS.U.Atomic.anyURI.matches(item);' diag='8|0|XTTE0590|where'>
      <check card='1' diag='8|0|XTTE0590|where'>
       <cvUntyped to='xs:anyURI' diag='8|0|XTTE0590|where'>
        <data>
         <supplied slot='0'/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <applyT line='95' flags='t' bSlot='0'>
     <fn role='select' name='document'>
      <varRef name='Q{}where' slot='0'/>
     </fn>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id='6' binds=''>
  <mode name='Q{}full-directory' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='3' rank='1' minImp='0' slots='0' flags='s' line='52' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <p.nodeTest test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='53' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element()'/>
       </fn>
      </att>
      <applyT line='54' flags='ci' bSlot='-1'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='0' rank='0' minImp='0' slots='0' flags='s' line='30' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}catalog)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;catalog&#39;;'/>
    <sequence role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='31'>
     <resultDoc global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#versifier_css'/>
      <empty role='content'/>
     </resultDoc>
     <resultDoc line='32' global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_body'/>
      <elem role='content' line='33' name='div' nsuri=''>
       <sequence>
        <att name='class' flags='l'>
         <str val='catalog'/>
        </att>
        <applyT line='34' flags='ci' bSlot='-1'>
         <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
        </applyT>
       </sequence>
      </elem>
     </resultDoc>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='1' rank='0' minImp='0' slots='0' flags='s' line='39' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='41' name='section' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='card toc-entry'/>
      </att>
      <att name='data-src' flags='l'>
       <convert from='xs:untypedAtomic' to='xs:string'>
        <attVal name='Q{}src' chk='0'/>
       </convert>
      </att>
      <att name='onclick' flags='l'>
       <str val='void(0)'/>
      </att>
      <applyT line='42' flags='ci' bSlot='-1'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='1.0' seq='2' rank='2' minImp='0' slots='0' flags='s' line='46' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
     <p.nodeTest test='element(Q{}card)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;card&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='47' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element(Q{}title)'/>
       </fn>
      </att>
      <applyT line='48' flags='ci' bSlot='-1'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id='7' binds='7'>
  <mode name='Q{}pause' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='1.0' seq='42' rank='2' minImp='0' slots='0' flags='s' as='xs:integer' line='285' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <axis ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='285' name='attribute' nodeTest='attribute(Q{}data-pause)' jsTest='return item.name===&#39;data-pause&#39;'/>
    </p.withPredicate>
    <cvUntyped role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='286' to='xs:integer' diag='7|0|XTTE0505|match="*[@data-pause]" mode="pause"'>
     <cast as='xs:untypedAtomic' emptiable='0'>
      <fn name='string'>
       <convert from='xs:integer' to='xs:string'>
        <cast as='xs:integer' emptiable='1'>
         <attVal name='Q{}data-pause' chk='0'/>
        </cast>
       </convert>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='41' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='283' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='283' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='l'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='3'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='40' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='282' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='282' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='verse-para'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='8'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='39' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='281' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='281' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='stanza'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='12'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='43' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='292' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='292' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='phr'/>
     </fn>
    </p.withPredicate>
    <check role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='293' card='1' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
     <sequence>
      <choose>
       <is op='is'>
        <dot type='element(Q{}span)'/>
        <slash>
         <root/>
         <first>
          <filter flags='b'>
           <axis name='descendant' nodeTest='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
           <fn name='contains-token'>
            <cvUntyped to='xs:string'>
             <attVal name='Q{}class' chk='0'/>
            </cvUntyped>
            <str val='phr'/>
           </fn>
          </filter>
         </first>
        </slash>
       </is>
       <int val='0'/>
      </choose>
      <treat line='294' as='xs:integer' jsTest='return SaxonJS.U.Atomic.integer.matches(item);' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
       <cvUntyped to='xs:integer' diag='7|0|XTTE0505|match="span[contains-token(@class,&#39;phr&#39;)]" mode="pause"'>
        <data>
         <applyT mode='Q{}pause' flags='t' bSlot='0'>
          <slash role='select' simple='1'>
           <first>
            <filter flags='b'>
             <slash simple='1'>
              <dot type='element(Q{}span)'/>
              <axis name='preceding' nodeTest='element(Q{}span)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;span&#39;;'/>
             </slash>
             <fn name='contains-token'>
              <cvUntyped to='xs:string'>
               <attVal name='Q{}class' chk='0'/>
              </cvUntyped>
              <str val='phr'/>
             </fn>
            </filter>
           </first>
           <axis name='child' nodeTest='text()' jsTest='return item.nodeType===3;'/>
          </slash>
         </applyT>
        </data>
       </cvUntyped>
      </treat>
     </sequence>
    </check>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='38' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='278' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='278' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val='…'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='5'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='37' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='277' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='277' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val='—'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='4'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='36' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='276' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='276' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val=':'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='5'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='35' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='275' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='275' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val=','/>
     </fn>
    </p.withPredicate>
    <int role='action' val='4'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='34' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='274' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='274' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val=';'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='5'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='33' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='273' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='273' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val='?'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='5'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='32' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='272' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='272' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val='!'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='5'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='31' rank='1' minImp='0' slots='0' flags='s' as='xs:integer' line='271' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='271' name='ends-with'>
      <cvUntyped to='xs:string'>
       <data>
        <dot type='text()'/>
       </data>
      </cvUntyped>
      <str val='.'/>
     </fn>
    </p.withPredicate>
    <int role='action' val='7'/>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='30' rank='0' minImp='0' slots='0' flags='s' as='xs:integer' line='266' module='versifier.xsl'>
    <p.nodeTest role='match' test='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
    <int role='action' val='0'/>
   </templateRule>
  </mode>
 </co>
 <co id='8' binds=''>
  <template name='Q{}css' flags='os' line='297' module='versifier.xsl' slots='0'>
   <valueOf role='body' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='297'>
    <str val='&#xA;         html, body { background-color: white }&#xA;         &#xA;         .tag { color: green; font-family: sans-serif; font-size: 80%; font-weight: bold }&#xA;         &#xA;         &#xA;         .pub { }&#xA;         &#xA;         .title { }&#xA;         &#xA;         .author { }&#xA;         &#xA;         .l { padding-left: 2em; text-indent: -2em; margin-top: 0ex; margin-bottom: 0ex }&#xA;         &#xA;         .l * { display: inline }&#xA;         &#xA;         span.phr {transition: color 1s ease-in;&#xA;              -moz-transition: color 1s ease-in;&#xA;              -webkit-transition: color 1s ease-in; }&#xA;         &#xA;         .ON { font-style: italic; font-weight: bold }&#xA;         &#xA;         .hidden { display: none }&#xA;         &#xA;         #xmljellysandwich_footer { clear: both; width: 100%; font-size: 80%;&#xA;          border-top: thin solid black; padding-top: 1em; padding-bottom: 2em;&#xA;          font-family: &#39;Roboto Slab&#39;, sans-serif;&#xA;          margin-top: 1em }&#xA;         &#xA;         #xmljellysandwich_header {&#xA;         top: 1em; right: 1em; position: fixed }&#xA;         &#xA;         #xmljellysandwich_directory {&#xA;         bottom: 20%; right: 1em; position: fixed }&#xA;         &#xA;         &#xA;         .catalog { max-width: 60% }&#xA;         section { margin-top: 1em; border: thin solid black; padding: 1em }&#xA;         section * { margin: 0em }&#xA;         section .title { font-weight: bold }&#xA;         section .source { font-style: italic }&#xA;         &#xA;   '/>
   </valueOf>
  </template>
 </co>
 <co id='9' binds='10 5'>
  <mode name='Q{http://saxonica.com/ns/interactiveXSLT}click' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='9' rank='0' minImp='0' slots='0' flags='s' line='89' module='versifier.xsl'>
    <p.nodeSet role='match' type='element()'>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='89' name='id'>
      <str val='page-title'/>
     </fn>
    </p.nodeSet>
    <callT role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='90' name='Q{}show-directory' bSlot='0' flags='t'/>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='8' rank='0' minImp='0' slots='1' flags='s' line='79' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='79' name='contains-token'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}class' chk='0'/>
      </cvUntyped>
      <str val='toc-entry'/>
     </fn>
    </p.withPredicate>
    <let role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='80' var='Q{}where' as='xs:anyURI?' slot='0' eval='8'>
     <fn name='resolve-uri'>
      <cvUntyped to='xs:string'>
       <attVal name='Q{}data-src' chk='0'/>
      </cvUntyped>
     </fn>
     <ifCall line='82' name='Q{http://saxonica.com/ns/interactiveXSLT}schedule-action' type='item()*'>
      <int val='0'/>
      <fn name='string'>
       <convert from='xs:anyURI' to='xs:string'>
        <varRef name='Q{}where' slot='0'/>
       </convert>
      </fn>
      <callT line='83' name='Q{}load-poem' bSlot='1'>
       <withParam name='Q{}where' flags='c' as='xs:anyURI'>
        <check line='84' card='1' diag='8|0|XTTE0590|where'>
         <varRef name='Q{}where' slot='0'/>
        </check>
       </withParam>
      </callT>
     </ifCall>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id='1' binds='2 11 7 0 1'>
  <mode name='Q{}spill' onNo='TC' flags='W' patternSlots='0'>
   <templateRule prec='0' prio='0.5' seq='29' rank='2' minImp='0' slots='0' flags='s' line='244' module='versifier.xsl'>
    <p.withPredicate role='match'>
     <p.nodeTest test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
     <fn ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='244' name='empty'>
      <filter flags='b'>
       <axis name='ancestor-or-self' nodeTest='element()' jsTest='return item.nodeType===1;'/>
       <fn name='contains-token'>
        <cvUntyped to='xs:string'>
         <attVal name='Q{}class' chk='0'/>
        </cvUntyped>
        <str val='verse'/>
       </fn>
      </filter>
     </fn>
    </p.withPredicate>
    <sequence role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='245'>
     <resultDoc global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_directory'/>
      <applyT role='content' line='246' mode='Q{}toc' bSlot='0'>
       <gVarRef role='select' name='Q{}source-catalog' bSlot='1'/>
      </applyT>
     </resultDoc>
     <resultDoc line='249' global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_footer'/>
      <sequence role='content' line='250'>
       <elem name='p' nsuri=''>
        <sequence>
         <elem name='i' nsuri='' flags='l'>
          <valueOf flags='l'>
           <str val='The Versifier'/>
          </valueOf>
         </elem>
         <valueOf flags='l'>
          <str val=' is a project of Wendell Piez for '/>
         </valueOf>
         <elem name='a' nsuri='' flags='l'>
          <sequence>
           <att name='href' flags='l'>
            <str val='http://pellucidliterature.org'/>
           </att>
           <valueOf flags='l'>
            <str val='Pellucid Literature'/>
           </valueOf>
          </sequence>
         </elem>
         <valueOf flags='l'>
          <str val=' starting in 2017. '/>
         </valueOf>
         <elem name='a' nsuri='' flags='l'>
          <sequence>
           <att name='href' flags='l'>
            <str val='https://github.com/wendellpiez/XMLjellysandwich'/>
           </att>
           <valueOf flags='l'>
            <str val='Find the source code on Github.'/>
           </valueOf>
          </sequence>
         </elem>
        </sequence>
       </elem>
       <elem line='251' name='p' nsuri=''>
        <sequence>
         <valueOf flags='l'>
          <str val='If you like it, check out the '/>
         </valueOf>
         <elem name='a' nsuri='' flags='l'>
          <sequence>
           <att name='href' flags='l'>
            <str val='teller.html'/>
           </att>
           <valueOf flags='l'>
            <str val='Poem Teller'/>
           </valueOf>
          </sequence>
         </elem>
         <valueOf flags='l'>
          <str val=', also on this site.'/>
         </valueOf>
        </sequence>
       </elem>
      </sequence>
     </resultDoc>
     <elem line='253' name='div' nsuri=''>
      <att name='id' flags='l'>
       <str val='xmljellysandwich_footer'/>
      </att>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='-0.2' seq='27' rank='1' minImp='0' slots='1' flags='s' line='224' module='versifier.xsl'>
    <p.nodeTest role='match' test='element()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;'/>
    <let role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='226' var='Q{}pause' as='document-node()' slot='0' eval='16'>
     <doc line='227' validation='preserve'>
      <applyT mode='Q{}pause' bSlot='2'>
       <dot role='select' type='element()'/>
      </applyT>
     </doc>
     <ifCall line='232' name='Q{http://saxonica.com/ns/interactiveXSLT}schedule-action' type='item()*'>
      <arith line='230' op='+' calc='i+i'>
       <cast as='xs:integer' emptiable='0'>
        <arith op='*' calc='d*d'>
         <cvUntyped to='xs:double'>
          <data>
           <varRef name='Q{}pause' slot='0'/>
          </data>
         </cvUntyped>
         <dbl val='360'/>
        </arith>
       </cast>
       <int val='1'/>
      </arith>
      <empty/>
      <callT line='233' name='Q{}show' bSlot='3'/>
     </ifCall>
    </let>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='28' rank='0' minImp='0' slots='0' flags='s' line='239' module='versifier.xsl'>
    <p.nodeTest role='match' test='( element() | text() | comment() | processing-instruction() )' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);'/>
    <applyT role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='240' mode='Q{}spill' flags='t' bSlot='4'>
     <first role='select'>
      <union op='|'>
       <axis name='child' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
       <axis name='following' nodeTest='node()' jsTest='return SaxonJS.U.isNode(item);'/>
      </union>
     </first>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id='10' binds='6 11'>
  <template name='Q{}show-directory' flags='os' line='23' module='versifier.xsl' slots='0'>
   <sequence role='body' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='25'>
    <resultDoc global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#xmljellysandwich_directory'/>
     <empty role='content'/>
    </resultDoc>
    <applyT line='26' mode='Q{}full-directory' flags='t' bSlot='0'>
     <gVarRef role='select' name='Q{}source-catalog' bSlot='1'/>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id='12' binds='8 6'>
  <template name='Q{}xmljellysandwich_pack' flags='os' line='12' module='versifier.xsl' slots='0'>
   <sequence role='body' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='14'>
    <resultDoc global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;'>
     <str role='href' val='#xmljellysandwich_css'/>
     <callT role='content' line='15' name='Q{}css' bSlot='0'/>
    </resultDoc>
    <applyT line='17' mode='Q{}full-directory' flags='t' bSlot='1'>
     <slash role='select' simple='1'>
      <treat as='node()' jsTest='return SaxonJS.U.isNode(item);' diag='14|3|XPTY0020|'>
       <dot flags='a'/>
      </treat>
      <axis name='child' nodeTest='element(Q{}catalog)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;catalog&#39;;'/>
     </slash>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id='11' binds=''>
  <globalVariable name='Q{}source-catalog' type='document-node()' line='21' module='versifier.xsl' visibility='PRIVATE' jsAcceptor='function test(item) {return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);};if (test(val)) {return val;} else {throw SaxonJS.XError(&#39;Conversion failed&#39;, &#39;XTTE0590&#39;);}' jsCardCheck='function c(n) {return n==1;};'>
   <root ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='21'/>
  </globalVariable>
 </co>
 <co id='3' binds='3 3 3 3 3 3 3 3 3 1 3 3 3 3 3 3 3 3 4 4'>
  <mode onNo='TC' flags='dW' patternSlots='0'>
   <templateRule prec='0' prio='0.0' seq='25' rank='1' minImp='0' slots='0' flags='s' line='212' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}love)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;love&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='213' name='span' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='love'/>
      </att>
      <applyT line='214' flags='i' bSlot='0'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='12' rank='2' minImp='0' slots='0' flags='s' line='118' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
     <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='119' name='h2' nsuri=''>
     <applyT line='120' flags='i' bSlot='1'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='21' rank='1' minImp='0' slots='0' flags='s' line='191' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='192' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element()'/>
       </fn>
      </att>
      <applyT line='193' flags='i' bSlot='2'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='19' rank='1' minImp='0' slots='0' flags='s' line='178' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}stanza)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;stanza&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='179' name='div' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='concat'>
        <fn name='local-name'>
         <dot type='element()'/>
        </fn>
        <str val=' hidden'/>
       </fn>
      </att>
      <applyT line='180' bSlot='3'>
       <axis role='select' name='attribute' nodeTest='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
      </applyT>
      <applyT line='181' flags='i' bSlot='4'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='10' rank='1' minImp='0' slots='0' flags='s' line='99' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    <applyT role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='105' flags='t' bSlot='5'>
     <sequence role='select'>
      <axis name='child' nodeTest='element(Q{}style)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;style&#39;;'/>
      <axis name='child' nodeTest='element(Q{}verse)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse&#39;;'/>
     </sequence>
    </applyT>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='24' rank='1' minImp='0' slots='0' flags='s' line='206' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}i)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;i&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='207' name='span' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='i'/>
      </att>
      <applyT line='208' flags='i' bSlot='6'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='15' rank='2' minImp='0' slots='0' flags='s' line='137' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}verse)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse&#39;;'/>
     <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    </p.withUpper>
    <sequence role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='138'>
     <resultDoc global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_directory'/>
      <empty role='content'/>
     </resultDoc>
     <resultDoc line='139' global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_footer'/>
      <empty role='content'/>
     </resultDoc>
     <resultDoc line='140' global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
      <str role='href' val='#xmljellysandwich_body'/>
      <sequence role='content' line='141'>
       <applyT bSlot='7'>
        <docOrder role='select' intra='1'>
         <slash>
          <axis name='parent' nodeTest='(document-node()|element())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
          <sequence>
           <axis name='child' nodeTest='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
           <axis name='child' nodeTest='element(Q{}author)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;author&#39;;'/>
           <axis name='child' nodeTest='element(Q{}source)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;source&#39;;'/>
          </sequence>
         </slash>
        </docOrder>
       </applyT>
       <elem line='142' name='div' nsuri=''>
        <sequence>
         <att name='class' flags='l'>
          <str val='verse'/>
         </att>
         <att name='id' flags='l'>
          <fn name='replace'>
           <convert from='xs:anyURI' to='xs:string'>
            <fn name='document-uri'>
             <root/>
            </fn>
           </convert>
           <str val='^.*/|\..*$'/>
           <str val=''/>
           <str val=''/>
          </fn>
         </att>
         <applyT line='143' flags='i' bSlot='8'>
          <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
         </applyT>
        </sequence>
       </elem>
      </sequence>
     </resultDoc>
     <applyT line='147' mode='Q{}spill' flags='t' bSlot='9'>
      <filter role='select' flags='b'>
       <slash simple='1'>
        <ifCall name='Q{http://saxonica.com/ns/interactiveXSLT}page' type='document-node()?'/>
        <axis name='descendant' nodeTest='element()' jsTest='return item.nodeType===1;'/>
       </slash>
       <fn name='contains-token'>
        <cvUntyped to='xs:string'>
         <attVal name='Q{}class' chk='0'/>
        </cvUntyped>
        <str val='verse'/>
       </fn>
      </filter>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='18' rank='1' minImp='0' slots='0' flags='s' line='171' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}verse)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='172' name='div' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='verse'/>
      </att>
      <applyT line='173' bSlot='10'>
       <axis role='select' name='attribute' nodeTest='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
      </applyT>
      <applyT line='174' flags='i' bSlot='11'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='21' part='1' rank='1' minImp='0' slots='0' flags='s' line='191' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='192' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element()'/>
       </fn>
      </att>
      <applyT line='193' flags='i' bSlot='2'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='13' rank='2' minImp='0' slots='0' flags='s' line='124' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}source)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;source&#39;;'/>
     <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='125' name='h3' nsuri=''>
     <sequence line='126'>
      <applyT flags='i' bSlot='12'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
      <forEach line='127'>
       <slash simple='2'>
        <axis name='parent' nodeTest='(document-node()|element())' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);'/>
        <axis name='child' nodeTest='element(Q{}date)' jsTest='var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;date&#39;;'/>
       </slash>
       <sequence>
        <valueOf flags='l'>
         <str val=' ('/>
        </valueOf>
        <valueOf flags='l'>
         <convert from='xs:untypedAtomic' to='xs:string'>
          <data>
           <dot type='element(Q{}date)'/>
          </data>
         </convert>
        </valueOf>
        <valueOf flags='Sl'>
         <str val=')'/>
        </valueOf>
       </sequence>
      </forEach>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='21' part='2' rank='1' minImp='0' slots='0' flags='s' line='191' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}source)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;source&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='192' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element()'/>
       </fn>
      </att>
      <applyT line='193' flags='i' bSlot='2'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='19' part='1' rank='1' minImp='0' slots='0' flags='s' line='178' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}verse-para)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;verse-para&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='179' name='div' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='concat'>
        <fn name='local-name'>
         <dot type='element()'/>
        </fn>
        <str val=' hidden'/>
       </fn>
      </att>
      <applyT line='180' bSlot='3'>
       <axis role='select' name='attribute' nodeTest='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
      </applyT>
      <applyT line='181' flags='i' bSlot='4'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='14' rank='2' minImp='0' slots='0' flags='s' line='131' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}style)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;style&#39;;'/>
     <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    </p.withUpper>
    <resultDoc role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='132' global='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;' local='#&#xD;&#xA;#Tue Mar 09 14:54:55 EST 2021&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;'>
     <str role='href' val='#versifier_css'/>
     <applyT role='content' line='133' flags='i' bSlot='13'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </resultDoc>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='22' rank='1' minImp='0' slots='0' flags='s' line='197' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='198' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='concat'>
        <str val='l hidden '/>
        <fn name='string'>
         <convert from='xs:untypedAtomic' to='xs:string'>
          <attVal name='Q{}r' chk='0'/>
         </convert>
        </fn>
       </fn>
      </att>
      <applyT line='199' bSlot='14'>
       <axis role='select' name='attribute' nodeTest='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
      </applyT>
      <applyT line='200' flags='i' bSlot='15'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='20' rank='2' minImp='0' slots='0' flags='s' line='185' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
     <p.nodeTest test='element(Q{}source)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;source&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='186' name='i' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <str val='title'/>
      </att>
      <applyT line='187' flags='i' bSlot='16'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='11' rank='2' minImp='0' slots='0' flags='s' line='112' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
     <p.nodeTest test='element(Q{}pub)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;pub&#39;;'/>
    </p.withUpper>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='113' name='h1' nsuri=''>
     <applyT line='114' flags='i' bSlot='17'>
      <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
     </applyT>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='21' part='3' rank='1' minImp='0' slots='0' flags='s' line='191' module='versifier.xsl'>
    <p.nodeTest role='match' test='element(Q{}title)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;title&#39;;'/>
    <elem role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='192' name='p' nsuri=''>
     <sequence>
      <att name='class' flags='l'>
       <fn name='local-name'>
        <dot type='element()'/>
       </fn>
      </att>
      <applyT line='193' flags='i' bSlot='2'>
       <axis role='select' name='child' nodeTest='node()' jsTest='return true;'/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec='0' prio='-0.5' seq='26' rank='0' minImp='0' slots='0' flags='s' line='218' module='versifier.xsl'>
    <p.nodeTest role='match' test='attribute()' jsTest='return SaxonJS.U.isAttr(item)'/>
    <compAtt role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='219'>
     <fn role='name' name='concat'>
      <str val='data-'/>
      <fn name='local-name'>
       <dot type='attribute()'/>
      </fn>
     </fn>
     <convert role='select' line='220' from='xs:untypedAtomic' to='xs:string'>
      <data>
       <dot type='attribute()'/>
      </data>
     </convert>
    </compAtt>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='23' rank='2' minImp='0' slots='0' flags='s' line='204' module='versifier.xsl'>
    <p.withUpper role='match' axis='parent' upFirst='false'>
     <p.nodeTest test='attribute(Q{}r)' jsTest='return SaxonJS.U.isAttr(item) &amp;&amp; item.name===&#39;r&#39;'/>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
    </p.withUpper>
    <empty role='action'/>
   </templateRule>
   <templateRule prec='0' prio='0.0' seq='17' rank='1' minImp='0' slots='0' flags='s' line='167' module='versifier.xsl'>
    <p.nodeTest role='match' test='attribute(Q{}pause)' jsTest='return SaxonJS.U.isAttr(item) &amp;&amp; item.name===&#39;pause&#39;'/>
    <att role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='168' name='data-pause'>
     <convert from='xs:untypedAtomic' to='xs:string'>
      <data>
       <dot type='attribute(Q{}pause)'/>
      </data>
     </convert>
    </att>
   </templateRule>
   <templateRule prec='0' prio='0.5' seq='16' rank='2' minImp='0' slots='0' flags='s' line='151' module='versifier.xsl'>
    <p.withUpper role='match' axis='ancestor' upFirst='false'>
     <p.nodeTest test='text()' jsTest='return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;'/>
     <p.nodeTest test='element(Q{}l)' jsTest='var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===&#39;&#39;&amp;&amp;q.local===&#39;l&#39;;'/>
    </p.withUpper>
    <analyzeString role='action' ns='xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~' line='152'>
     <cvUntyped role='select' to='xs:string'>
      <data>
       <dot type='text()'/>
      </data>
     </cvUntyped>
     <fn role='regex' name='concat'>
      <str val='[^'/>
      <gVarRef name='Q{}terminalchars' bSlot='18'/>
      <str val=']*['/>
      <gVarRef name='Q{}terminalchars' bSlot='19'/>
      <str val=']'/>
     </fn>
     <str role='flags' val=''/>
     <elem role='matching' line='154' name='span' nsuri=''>
      <sequence>
       <att name='class' flags='l'>
        <str val='phr hidden'/>
       </att>
       <valueOf line='155' flags='l'>
        <dot type='xs:string'/>
       </valueOf>
      </sequence>
     </elem>
     <elem role='nonMatching' line='159' name='span' nsuri=''>
      <sequence>
       <att name='class' flags='l'>
        <str val='phr hidden'/>
       </att>
       <valueOf line='160' flags='l'>
        <dot type='xs:string'/>
       </valueOf>
      </sequence>
     </elem>
    </analyzeString>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <output>
  <property name='{http://saxon.sf.net/}stylesheet-version' value='30'/>
 </output>
 <decimalFormat/>
</package>
<?Σ 1a7f70d?>
